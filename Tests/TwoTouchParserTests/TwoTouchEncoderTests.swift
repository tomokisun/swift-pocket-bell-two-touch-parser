import TwoTouchParser
import Testing

actor TwoTouchEncoderTests {
  @Test
  func encode() throws {
    let encoder = TwoTouchEncoder()
    #expect(try encoder.encode(from: "0") == "00")
    #expect(try encoder.encode(from: "わ") == "01")
    #expect(try encoder.encode(from: "を") == "02")
    #expect(try encoder.encode(from: "ん") == "03")
    #expect(try encoder.encode(from: "゛") == "04")
    #expect(try encoder.encode(from: "。") == "05")
    #expect(try encoder.encode(from: "6") == "06")
    #expect(try encoder.encode(from: "7") == "07")
    #expect(try encoder.encode(from: "8") == "08")
    #expect(try encoder.encode(from: "9") == "09")
    #expect(try encoder.encode(from: "E") == "10")
    #expect(try encoder.encode(from: "あ") == "11")
    #expect(try encoder.encode(from: "い") == "12")
    #expect(try encoder.encode(from: "う") == "13")
    #expect(try encoder.encode(from: "え") == "14")
    #expect(try encoder.encode(from: "お") == "15")
    #expect(try encoder.encode(from: "A") == "16")
    #expect(try encoder.encode(from: "B") == "17")
    #expect(try encoder.encode(from: "C") == "18")
    #expect(try encoder.encode(from: "D") == "19")
    #expect(try encoder.encode(from: "J") == "20")
    #expect(try encoder.encode(from: "か") == "21")
    #expect(try encoder.encode(from: "き") == "22")
    #expect(try encoder.encode(from: "く") == "23")
    #expect(try encoder.encode(from: "け") == "24")
    #expect(try encoder.encode(from: "こ") == "25")
    #expect(try encoder.encode(from: "F") == "26")
    #expect(try encoder.encode(from: "G") == "27")
    #expect(try encoder.encode(from: "H") == "28")
    #expect(try encoder.encode(from: "I") == "29")
    #expect(try encoder.encode(from: "O") == "30")
    #expect(try encoder.encode(from: "さ") == "31")
    #expect(try encoder.encode(from: "し") == "32")
    #expect(try encoder.encode(from: "す") == "33")
    #expect(try encoder.encode(from: "せ") == "34")
    #expect(try encoder.encode(from: "そ") == "35")
    #expect(try encoder.encode(from: "K") == "36")
    #expect(try encoder.encode(from: "L") == "37")
    #expect(try encoder.encode(from: "M") == "38")
    #expect(try encoder.encode(from: "N") == "39")
    #expect(try encoder.encode(from: "T") == "40")
    #expect(try encoder.encode(from: "た") == "41")
    #expect(try encoder.encode(from: "ち") == "42")
    #expect(try encoder.encode(from: "つ") == "43")
    #expect(try encoder.encode(from: "て") == "44")
    #expect(try encoder.encode(from: "と") == "45")
    #expect(try encoder.encode(from: "P") == "46")
    #expect(try encoder.encode(from: "Q") == "47")
    #expect(try encoder.encode(from: "R") == "48")
    #expect(try encoder.encode(from: "S") == "49")
    #expect(try encoder.encode(from: "Y") == "50")
    #expect(try encoder.encode(from: "な") == "51")
    #expect(try encoder.encode(from: "に") == "52")
    #expect(try encoder.encode(from: "ぬ") == "53")
    #expect(try encoder.encode(from: "ね") == "54")
    #expect(try encoder.encode(from: "の") == "55")
    #expect(try encoder.encode(from: "U") == "56")
    #expect(try encoder.encode(from: "V") == "57")
    #expect(try encoder.encode(from: "W") == "58")
    #expect(try encoder.encode(from: "X") == "59")
    #expect(try encoder.encode(from: "/") == "60")
    #expect(try encoder.encode(from: "は") == "61")
    #expect(try encoder.encode(from: "ひ") == "62")
    #expect(try encoder.encode(from: "ふ") == "63")
    #expect(try encoder.encode(from: "へ") == "64")
    #expect(try encoder.encode(from: "ほ") == "65")
    #expect(try encoder.encode(from: "Z") == "66")
    #expect(try encoder.encode(from: "?") == "67")
    #expect(try encoder.encode(from: "!") == "68")
    #expect(try encoder.encode(from: "-") == "69")
    #expect(try encoder.encode(from: "●") == "70")
    #expect(try encoder.encode(from: "ま") == "71")
    #expect(try encoder.encode(from: "み") == "72")
    #expect(try encoder.encode(from: "む") == "73")
    #expect(try encoder.encode(from: "め") == "74")
    #expect(try encoder.encode(from: "も") == "75")
    #expect(try encoder.encode(from: "¥") == "76")
    #expect(try encoder.encode(from: "&") == "77")
    #expect(try encoder.encode(from: "●") == "70")
    #expect(try encoder.encode(from: "●") == "70")
    #expect(try encoder.encode(from: "●") == "70")
    #expect(try encoder.encode(from: "や") == "81")
    #expect(try encoder.encode(from: "（") == "82")
    #expect(try encoder.encode(from: "ゆ") == "83")
    #expect(try encoder.encode(from: "）") == "84")
    #expect(try encoder.encode(from: "よ") == "85")
    #expect(try encoder.encode(from: "*") == "86")
    #expect(try encoder.encode(from: "#") == "87")
    #expect(try encoder.encode(from: " ") == "88")
    #expect(try encoder.encode(from: "●") == "70")
    #expect(try encoder.encode(from: "5") == "90")
    #expect(try encoder.encode(from: "ら") == "91")
    #expect(try encoder.encode(from: "り") == "92")
    #expect(try encoder.encode(from: "る") == "93")
    #expect(try encoder.encode(from: "れ") == "94")
    #expect(try encoder.encode(from: "ろ") == "95")
    #expect(try encoder.encode(from: "1") == "96")
    #expect(try encoder.encode(from: "2") == "97")
    #expect(try encoder.encode(from: "3") == "98")
    #expect(try encoder.encode(from: "4") == "99")
  }
}
